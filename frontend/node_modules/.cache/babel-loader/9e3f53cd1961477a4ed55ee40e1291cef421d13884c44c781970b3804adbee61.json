{"ast":null,"code":"var _jsxFileName = \"/Volumes/PortableSSD/Study/subing/subing/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authService } from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // 컴포넌트 마운트 시 로컬스토리지에서 사용자 정보 확인\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const currentUser = authService.getCurrentUser();\n        if (currentUser && authService.isAuthenticated()) {\n          setUser(currentUser);\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        authService.logout();\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n\n  // 로그인 함수\n  const login = async credentials => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await authService.login(credentials);\n      const userData = response.data; // 백엔드에서 직접 사용자 정보 반환\n\n      setUser(userData);\n      return response;\n    } catch (error) {\n      setError(error.message || '로그인에 실패했습니다.');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 회원가입 함수\n  const signup = async userData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await authService.signup(userData);\n      return response;\n    } catch (error) {\n      setError(error.message || '회원가입에 실패했습니다.');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 로그아웃 함수\n  const logout = () => {\n    authService.logout();\n    setUser(null);\n    setError(null);\n  };\n\n  // 에러 초기화 함수\n  const clearError = () => {\n    setError(null);\n  };\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    signup,\n    logout,\n    clearError,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","error","setError","initializeAuth","currentUser","getCurrentUser","isAuthenticated","console","logout","login","credentials","response","userData","data","message","signup","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Volumes/PortableSSD/Study/subing/subing/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authService } from '../services/authService';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // 컴포넌트 마운트 시 로컬스토리지에서 사용자 정보 확인\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const currentUser = authService.getCurrentUser();\n        if (currentUser && authService.isAuthenticated()) {\n          setUser(currentUser);\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        authService.logout();\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  // 로그인 함수\n  const login = async (credentials) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await authService.login(credentials);\n      const userData = response.data; // 백엔드에서 직접 사용자 정보 반환\n      \n      setUser(userData);\n      return response;\n    } catch (error) {\n      setError(error.message || '로그인에 실패했습니다.');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 회원가입 함수\n  const signup = async (userData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await authService.signup(userData);\n      return response;\n    } catch (error) {\n      setError(error.message || '회원가입에 실패했습니다.');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 로그아웃 함수\n  const logout = () => {\n    authService.logout();\n    setUser(null);\n    setError(null);\n  };\n\n  // 에러 초기화 함수\n  const clearError = () => {\n    setError(null);\n  };\n\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    signup,\n    logout,\n    clearError,\n    isAuthenticated: !!user\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}