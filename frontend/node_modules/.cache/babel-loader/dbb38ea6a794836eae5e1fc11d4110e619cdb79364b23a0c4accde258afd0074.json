{"ast":null,"code":"import api from'./api';export const authService={// 회원가입\nasync signup(userData){try{const response=await api.post('/users/signup',userData);return response.data;}catch(error){var _error$response;throw((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data)||error;}},// 로그인\nasync login(credentials){try{const response=await api.post('/users/login',credentials);const{data}=response.data;// 사용자 정보만 로컬스토리지에 저장 (토큰 체크 제거)\nif(data){localStorage.setItem('user',JSON.stringify(data));}return response.data;}catch(error){var _error$response2;throw((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data)||error;}},// 로그아웃\nlogout(){localStorage.removeItem('user');// token 제거는 불필요\n},// 현재 사용자 정보 가져오기\ngetCurrentUser(){const user=localStorage.getItem('user');return user?JSON.parse(user):null;},// 토큰 가져오기 (현재는 사용 안함)\ngetToken(){return null;},// 로그인 상태 확인 - 토큰 대신 사용자 정보로 체크\nisAuthenticated(){return!!this.getCurrentUser();}};","map":{"version":3,"names":["api","authService","signup","userData","response","post","data","error","_error$response","login","credentials","localStorage","setItem","JSON","stringify","_error$response2","logout","removeItem","getCurrentUser","user","getItem","parse","getToken","isAuthenticated"],"sources":["/Volumes/PortableSSD/Study/subing/subing/frontend/src/services/authService.js"],"sourcesContent":["import api from './api';\n\nexport const authService = {\n  // 회원가입\n  async signup(userData) {\n    try {\n      const response = await api.post('/users/signup', userData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error;\n    }\n  },\n\n  // 로그인\n  async login(credentials) {\n    try {\n      const response = await api.post('/users/login', credentials);\n      const { data } = response.data;\n      \n      // 사용자 정보만 로컬스토리지에 저장 (토큰 체크 제거)\n      if (data) {\n        localStorage.setItem('user', JSON.stringify(data));\n      }\n      \n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error;\n    }\n  },\n\n  // 로그아웃\n  logout() {\n    localStorage.removeItem('user');\n    // token 제거는 불필요\n  },\n\n  // 현재 사용자 정보 가져오기\n  getCurrentUser() {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n\n  // 토큰 가져오기 (현재는 사용 안함)\n  getToken() {\n    return null;\n  },\n\n  // 로그인 상태 확인 - 토큰 대신 사용자 정보로 체크\n  isAuthenticated() {\n    return !!this.getCurrentUser();\n  }\n};\n"],"mappings":"AAAA,MAAO,CAAAA,GAAG,KAAM,OAAO,CAEvB,MAAO,MAAM,CAAAC,WAAW,CAAG,CACzB;AACA,KAAM,CAAAC,MAAMA,CAACC,QAAQ,CAAE,CACrB,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACK,IAAI,CAAC,eAAe,CAAEF,QAAQ,CAAC,CAC1D,MAAO,CAAAC,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,KAAAC,eAAA,CACd,KAAM,EAAAA,eAAA,CAAAD,KAAK,CAACH,QAAQ,UAAAI,eAAA,iBAAdA,eAAA,CAAgBF,IAAI,GAAIC,KAAK,CACrC,CACF,CAAC,CAED;AACA,KAAM,CAAAE,KAAKA,CAACC,WAAW,CAAE,CACvB,GAAI,CACF,KAAM,CAAAN,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACK,IAAI,CAAC,cAAc,CAAEK,WAAW,CAAC,CAC5D,KAAM,CAAEJ,IAAK,CAAC,CAAGF,QAAQ,CAACE,IAAI,CAE9B;AACA,GAAIA,IAAI,CAAE,CACRK,YAAY,CAACC,OAAO,CAAC,MAAM,CAAEC,IAAI,CAACC,SAAS,CAACR,IAAI,CAAC,CAAC,CACpD,CAEA,MAAO,CAAAF,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,KAAAQ,gBAAA,CACd,KAAM,EAAAA,gBAAA,CAAAR,KAAK,CAACH,QAAQ,UAAAW,gBAAA,iBAAdA,gBAAA,CAAgBT,IAAI,GAAIC,KAAK,CACrC,CACF,CAAC,CAED;AACAS,MAAMA,CAAA,CAAG,CACPL,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC,CAC/B;AACF,CAAC,CAED;AACAC,cAAcA,CAAA,CAAG,CACf,KAAM,CAAAC,IAAI,CAAGR,YAAY,CAACS,OAAO,CAAC,MAAM,CAAC,CACzC,MAAO,CAAAD,IAAI,CAAGN,IAAI,CAACQ,KAAK,CAACF,IAAI,CAAC,CAAG,IAAI,CACvC,CAAC,CAED;AACAG,QAAQA,CAAA,CAAG,CACT,MAAO,KAAI,CACb,CAAC,CAED;AACAC,eAAeA,CAAA,CAAG,CAChB,MAAO,CAAC,CAAC,IAAI,CAACL,cAAc,CAAC,CAAC,CAChC,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}