{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{authService}from'../services/authService';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);// 컴포넌트 마운트 시 로컬스토리지에서 사용자 정보 확인\nuseEffect(()=>{const initializeAuth=async()=>{try{const currentUser=authService.getCurrentUser();if(currentUser&&authService.isAuthenticated()){setUser(currentUser);}}catch(error){console.error('Auth initialization error:',error);authService.logout();}finally{setLoading(false);}};initializeAuth();},[]);// 로그인 함수\nconst login=async credentials=>{try{setLoading(true);setError(null);const response=await authService.login(credentials);const userData=response.data.user;setUser(userData);return response;}catch(error){setError(error.message||'로그인에 실패했습니다.');throw error;}finally{setLoading(false);}};// 회원가입 함수\nconst signup=async userData=>{try{setLoading(true);setError(null);const response=await authService.signup(userData);return response;}catch(error){setError(error.message||'회원가입에 실패했습니다.');throw error;}finally{setLoading(false);}};// 로그아웃 함수\nconst logout=()=>{authService.logout();setUser(null);setError(null);};// 에러 초기화 함수\nconst clearError=()=>{setError(null);};const value={user,loading,error,login,signup,logout,clearError,isAuthenticated:!!user};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authService","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","error","setError","initializeAuth","currentUser","getCurrentUser","isAuthenticated","console","logout","login","credentials","response","userData","data","message","signup","clearError","value","Provider"],"sources":["/Volumes/PortableSSD/Study/subing/subing/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authService } from '../services/authService';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // 컴포넌트 마운트 시 로컬스토리지에서 사용자 정보 확인\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const currentUser = authService.getCurrentUser();\n        if (currentUser && authService.isAuthenticated()) {\n          setUser(currentUser);\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        authService.logout();\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  // 로그인 함수\n  const login = async (credentials) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await authService.login(credentials);\n      const userData = response.data.user;\n      \n      setUser(userData);\n      return response;\n    } catch (error) {\n      setError(error.message || '로그인에 실패했습니다.');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 회원가입 함수\n  const signup = async (userData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const response = await authService.signup(userData);\n      return response;\n    } catch (error) {\n      setError(error.message || '회원가입에 실패했습니다.');\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 로그아웃 함수\n  const logout = () => {\n    authService.logout();\n    setUser(null);\n    setError(null);\n  };\n\n  // 에러 초기화 함수\n  const clearError = () => {\n    setError(null);\n  };\n\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    signup,\n    logout,\n    clearError,\n    isAuthenticated: !!user\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}