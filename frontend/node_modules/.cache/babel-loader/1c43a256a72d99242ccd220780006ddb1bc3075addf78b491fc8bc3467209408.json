{"ast":null,"code":"import api from './api';\nexport const authService = {\n  // 회원가입\n  async signup(userData) {\n    try {\n      const response = await api.post('/users/signup', userData);\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error;\n    }\n  },\n  // 로그인\n  async login(credentials) {\n    try {\n      const response = await api.post('/users/login', credentials);\n      const {\n        data\n      } = response.data;\n\n      // 사용자 정보만 로컬스토리지에 저장 (토큰 체크 제거)\n      if (data) {\n        localStorage.setItem('user', JSON.stringify(data));\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error;\n    }\n  },\n  // 로그아웃\n  logout() {\n    localStorage.removeItem('user');\n    // token 제거는 불필요\n  },\n  // 현재 사용자 정보 가져오기\n  getCurrentUser() {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n  // 토큰 가져오기 (현재는 사용 안함)\n  getToken() {\n    return null;\n  },\n  // 로그인 상태 확인 - 토큰 대신 사용자 정보로 체크\n  isAuthenticated() {\n    return !!this.getCurrentUser();\n  }\n};","map":{"version":3,"names":["api","authService","signup","userData","response","post","data","error","_error$response","login","credentials","localStorage","setItem","JSON","stringify","_error$response2","logout","removeItem","getCurrentUser","user","getItem","parse","getToken","isAuthenticated"],"sources":["/Volumes/PortableSSD/Study/subing/subing/frontend/src/services/authService.js"],"sourcesContent":["import api from './api';\n\nexport const authService = {\n  // 회원가입\n  async signup(userData) {\n    try {\n      const response = await api.post('/users/signup', userData);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error;\n    }\n  },\n\n  // 로그인\n  async login(credentials) {\n    try {\n      const response = await api.post('/users/login', credentials);\n      const { data } = response.data;\n      \n      // 사용자 정보만 로컬스토리지에 저장 (토큰 체크 제거)\n      if (data) {\n        localStorage.setItem('user', JSON.stringify(data));\n      }\n      \n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error;\n    }\n  },\n\n  // 로그아웃\n  logout() {\n    localStorage.removeItem('user');\n    // token 제거는 불필요\n  },\n\n  // 현재 사용자 정보 가져오기\n  getCurrentUser() {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n\n  // 토큰 가져오기 (현재는 사용 안함)\n  getToken() {\n    return null;\n  },\n\n  // 로그인 상태 확인 - 토큰 대신 사용자 정보로 체크\n  isAuthenticated() {\n    return !!this.getCurrentUser();\n  }\n};\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,OAAO,MAAMC,WAAW,GAAG;EACzB;EACA,MAAMC,MAAMA,CAACC,QAAQ,EAAE;IACrB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,eAAe,EAAEF,QAAQ,CAAC;MAC1D,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,eAAA;MACd,MAAM,EAAAA,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,uBAAdA,eAAA,CAAgBF,IAAI,KAAIC,KAAK;IACrC;EACF,CAAC;EAED;EACA,MAAME,KAAKA,CAACC,WAAW,EAAE;IACvB,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,cAAc,EAAEK,WAAW,CAAC;MAC5D,MAAM;QAAEJ;MAAK,CAAC,GAAGF,QAAQ,CAACE,IAAI;;MAE9B;MACA,IAAIA,IAAI,EAAE;QACRK,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACR,IAAI,CAAC,CAAC;MACpD;MAEA,OAAOF,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAQ,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAAR,KAAK,CAACH,QAAQ,cAAAW,gBAAA,uBAAdA,gBAAA,CAAgBT,IAAI,KAAIC,KAAK;IACrC;EACF,CAAC;EAED;EACAS,MAAMA,CAAA,EAAG;IACPL,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;IAC/B;EACF,CAAC;EAED;EACAC,cAAcA,CAAA,EAAG;IACf,MAAMC,IAAI,GAAGR,YAAY,CAACS,OAAO,CAAC,MAAM,CAAC;IACzC,OAAOD,IAAI,GAAGN,IAAI,CAACQ,KAAK,CAACF,IAAI,CAAC,GAAG,IAAI;EACvC,CAAC;EAED;EACAG,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI;EACb,CAAC;EAED;EACAC,eAAeA,CAAA,EAAG;IAChB,OAAO,CAAC,CAAC,IAAI,CAACL,cAAc,CAAC,CAAC;EAChC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}